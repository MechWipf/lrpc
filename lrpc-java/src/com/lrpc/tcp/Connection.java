package com.lrpc.tcp;

import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import com.lrpc.buf.RecvBuf;
import com.lrpc.buf.SendData;
import com.lrpc.val.ByteQue;

/**
 * method for calling server by sending data synchronously with TCP
 */
public class Connection implements java.io.Closeable {

    private Socket socket;

    /**
     * connect to the service host
     * 
     * @param host server address
     * @param port server port
     */
    public Connection(String host, int port) throws UnknownHostException, IOException {
        socket = new Socket(host, port);
    }

    /**
     * close connection
     */
    public void close() {
        try {
            socket.shutdownInput();
            socket.shutdownOutput();
            socket.close();
        } catch (IOException _e) {
        }
    }

    /**
     * call the server method
     * 
     * @param fun     data generated by Fun.fun
     * @param retType use null if there is no return value
     * @return the data returned by the server is null when there is no return value
     */
    public Object invoke(ByteQue fun, Class<?> retType) throws IOException, UnsupportedOperationException {
        socket.getOutputStream().write(new SendData(fun).toArray());
        RecvBuf recv = new RecvBuf();
        byte[] buf = new byte[1024];
        while (true) {
            if (recv.size() != null && recv.size() == recv.len()) {
                break;
            }
            int read = socket.getInputStream().read(buf);
            if (read > 0) {
                recv.append(buf, read);
            } else {
                close();
                throw new UnsupportedOperationException("remote connection has been disconnected");
            }
        }
        ByteQue ret = recv.byteQue();
        String msg = (String) ret.pop(String.class);
        if (msg != null) {
            throw new UnsupportedOperationException(msg);
        }
        if (retType != null && retType != Void.TYPE) {
            return ret.pop(retType);
        }
        return null;
    }
}